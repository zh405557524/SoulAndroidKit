# SoulAndroidKit 功能测试规则

## 📋 测试概述

SoulAndroidKit 采用层级化的功能测试架构，支持手动测试和自动测试两种模式，确保各个模块功能的正确性和可靠性。

## 🏗️ 测试页面层级结构

### 层级划分

测试页面采用三级层级结构：

#### 第一层：大类（Category）
表示项目的主要模块分类：
- **core** - Android 核心功能模块
  - 包含 Android 原生代码的封装
  - 不依赖第三方库
  - 提供基础能力和工具类
- **kit** - 常用能力封装模块
  - 封装经过市场验证的第三方库
  - 稳定、常用的开发库
  - 如：下载、网络请求等通用能力
- **ffmpeg** - 专项业务模块
  - 视频处理相关功能
  - 大型专业业务模块
  - 未来可能扩展：语音处理等专项模块

#### 第二层：小模块分类（Submodule）
对应各大类下的具体子模块：
- **core** 大类下的小模块：
  - `common` - 通用工具
  - `database` - 数据库
  - `designsystem` - 设计系统
  - `composeui` - Compose UI工具
  - `ui` - 传统UI
  - `network` - 网络请求
  - `media` - 多媒体基础
- **kit** 大类下的小模块：
  - `video` - 视频能力
  - `picker` - 媒体选择器
  - `download` - 下载管理
  - `player-media3` - 播放器
- **ffmpeg** 大类下的小模块：
  - `ffmpeg_kit` - FFmpeg处理核心

#### 第三层：业务功能列表（Feature List）
每个小模块下的具体业务功能点：
- 每个功能点对应一个测试项
- 每个测试项有一个测试按钮
- 按钮可以手动触发测试
- 按钮状态反映测试结果（绿色=成功，红色=失败）

### 层级导航示例

```
首页
├── core（大类）
│   ├── common（小模块）
│   │   ├── 功能1测试按钮
│   │   ├── 功能2测试按钮
│   │   └── ...
│   ├── database（小模块）
│   │   ├── 数据库创建测试
│   │   ├── 数据插入测试
│   │   └── ...
│   └── network（小模块）
│       ├── GET请求测试
│       ├── POST请求测试
│       └── ...
├── kit（大类）
│   ├── video（小模块）
│   │   ├── 视频信息获取测试
│   │   ├── 视频格式转换测试
│   │   └── ...
│   └── download（小模块）
│       ├── 下载开始测试
│       ├── 下载进度测试
│       └── ...
└── ffmpeg（大类）
    └── ffmpeg_kit（小模块）
        ├── FFmpeg命令执行测试
        ├── 视频编码测试
        └── ...
```

---

## 🔘 业务功能测试规范

### 单个功能测试

#### 测试按钮规范
1. **按钮状态**：
   - **默认状态**：灰色/默认色（未测试）
   - **测试中状态**：蓝色/加载动画（测试进行中）
   - **成功状态**：绿色背景（测试通过）
   - **失败状态**：红色背景（测试失败）

2. **按钮交互**：
   - 点击按钮触发对应的功能测试
   - 测试过程中按钮显示加载状态
   - 测试完成后更新按钮颜色
   - 可以多次点击进行重复测试

3. **按钮显示信息**：
   - 按钮文本：功能名称
   - 状态指示：颜色背景
   - 可选：显示测试耗时

#### 测试执行流程
```
用户点击按钮
    ↓
显示加载状态（蓝色）
    ↓
执行功能测试
    ↓
捕获测试结果
    ↓
更新按钮状态（绿色/红色）
    ↓
显示测试结果信息（可选：Toast/Log）
```

### 测试结果处理

#### 成功判定
- 功能按预期执行完成
- 返回正确的结果
- 无异常抛出
- 关键步骤验证通过

#### 失败判定
- 功能执行过程中抛出异常
- 返回错误的结果
- 超时未完成
- 关键步骤验证失败

#### 错误信息记录
- 记录异常类型和堆栈
- 记录失败的原因描述
- 记录失败时间
- 保存到测试报告

---

## 🤖 自动测试功能

### 自动测试触发

每个小模块的功能列表页面需要提供：
1. **"全部测试"按钮**
   - 位置：功能列表顶部或底部
   - 功能：自动依次执行当前小模块的所有功能测试
   - 状态：显示自动测试进度

### 自动测试执行流程

```
用户点击"全部测试"
    ↓
禁用所有功能按钮（防止手动测试干扰）
    ↓
按顺序执行每个功能测试
    ↓
    ├── 显示当前测试项（高亮）
    ├── 执行测试
    ├── 记录结果（成功/失败）
    └── 更新对应按钮颜色
    ↓
生成测试报告
    ↓
恢复按钮交互
    ↓
显示测试报告
```

### 测试报告规范

#### 报告内容
1. **总体统计**：
   - 总测试项数量
   - 成功数量
   - 失败数量
   - 成功率（百分比）
   - 总耗时

2. **详细结果列表**：
   - 每个功能项的测试结果
   - 成功项：显示 ✅ 和耗时
   - 失败项：显示 ❌、失败原因、错误信息

3. **错误汇总**：
   - 所有失败项的详细信息
   - 错误类型分类
   - 可能的修复建议

#### 报告格式示例

```
╔════════════════════════════════════════╗
║     自动测试报告 - core/common          ║
╠════════════════════════════════════════╣
║ 测试时间：2024-01-15 10:30:25          ║
║ 总测试项：10                            ║
║ 成功：8                                 ║
║ 失败：2                                 ║
║ 成功率：80%                             ║
║ 总耗时：2.5s                            ║
╠════════════════════════════════════════╣
║ 测试详情：                               ║
║                                        ║
║ ✅ 字符串扩展 - isEmpty()    [50ms]    ║
║ ✅ 字符串扩展 - isEmail()     [30ms]    ║
║ ❌ 字符串扩展 - format()      [失败]    ║
║    错误：NullPointerException          ║
║    详情：参数为null时未处理...          ║
║                                        ║
║ ✅ 日期工具 - format()        [20ms]    ║
║ ✅ 日期工具 - parse()         [25ms]    ║
║ ...                                   ║
╠════════════════════════════════════════╣
║ 错误汇总：                               ║
║ 1. 字符串扩展 - format()                ║
║    原因：空值处理不完善                 ║
║ 2. 日志工具 - logError()                ║
║    原因：权限不足                       ║
╚════════════════════════════════════════╝
```

### 自动测试按钮状态同步

在自动测试执行过程中：
- 每个功能按钮实时更新颜色（绿色/红色）
- 当前正在测试的按钮显示加载状态
- 已完成的按钮保持最终状态（绿色/红色）
- 测试完成后，所有按钮恢复正常交互

---

## 🎨 UI实现规范

### 颜色规范

| 状态 | 颜色值 | 使用场景 |
|------|--------|---------|
| 未测试 | `#9E9E9E` (灰色) | 初始状态 |
| 测试中 | `#2196F3` (蓝色) | 加载/执行中 |
| 成功 | `#4CAF50` (绿色) | 测试通过 |
| 失败 | `#F44336` (红色) | 测试失败 |

### 按钮样式规范

#### 单个测试按钮
```kotlin
// 推荐使用 Material Design 3 Button
// 根据状态设置不同背景色
Button(
    onClick = { triggerTest() },
    colors = ButtonDefaults.buttonColors(
        containerColor = when (testState) {
            TestState.NotTested -> Color.Gray
            TestState.Testing -> Color.Blue
            TestState.Success -> Color.Green
            TestState.Failed -> Color.Red
        }
    )
) {
    Text("功能名称")
}
```

#### 全部测试按钮
- 使用 `OutlinedButton` 或 `TextButton` 区分样式
- 显示测试进度（如："测试中... 3/10"）
- 测试完成后可以显示报告入口

### 页面布局规范

#### 功能列表页面结构
```
┌─────────────────────────────────────┐
│  返回按钮    [core/common]   全部测试│  ← 顶部栏
├─────────────────────────────────────┤
│  ┌───────────────────────────────┐  │
│  │  功能1测试    [绿色按钮]      │  │
│  ├───────────────────────────────┤  │
│  │  功能2测试    [红色按钮]      │  │
│  ├───────────────────────────────┤  │
│  │  功能3测试    [灰色按钮]      │  │
│  └───────────────────────────────┘  │
└─────────────────────────────────────┘
```

---

## 📝 测试代码组织规范

### 测试用例结构

```kotlin
// 测试用例接口
interface TestCase {
    val name: String
    val description: String

    suspend fun execute(): TestResult
}

// 测试结果
data class TestResult(
    val success: Boolean,
    val message: String? = null,
    val error: Throwable? = null,
    val duration: Long = 0 // 耗时（毫秒）
)

// 测试状态
enum class TestState {
    NotTested,  // 未测试
    Testing,    // 测试中
    Success,    // 成功
    Failed      // 失败
}
```

### 测试用例注册

每个小模块应该维护自己的测试用例列表：

```kotlin
// core/common 模块测试用例
object CommonTestCases {
    val testCases = listOf(
        StringExtensionTestCase(),
        DateUtilsTestCase(),
        LoggerTestCase(),
        // ...
    )
}

// 测试用例实现示例
class StringExtensionTestCase : TestCase {
    override val name = "字符串扩展 - isEmpty()"
    override val description = "测试字符串空值判断功能"

    override suspend fun execute(): TestResult {
        return try {
            val startTime = System.currentTimeMillis()

            // 执行测试
            val result1 = "".isEmpty()
            val result2 = "test".isEmpty()
            val result3 = null.isNullOrEmpty()

            // 验证结果
            require(result1 == true)
            require(result2 == false)
            require(result3 == true)

            val duration = System.currentTimeMillis() - startTime
            TestResult(
                success = true,
                message = "所有测试通过",
                duration = duration
            )
        } catch (e: Exception) {
            TestResult(
                success = false,
                error = e,
                message = "测试失败: ${e.message}"
            )
        }
    }
}
```

### 测试执行器

```kotlin
class TestExecutor {
    suspend fun executeSingle(testCase: TestCase): TestResult {
        return testCase.execute()
    }

    suspend fun executeAll(testCases: List<TestCase>): TestReport {
        val results = mutableListOf<TestResult>()
        val startTime = System.currentTimeMillis()

        testCases.forEach { testCase ->
            val result = executeSingle(testCase)
            results.add(result)
        }

        val duration = System.currentTimeMillis() - startTime
        return TestReport(
            moduleName = "模块名称",
            totalCount = testCases.size,
            successCount = results.count { it.success },
            failedCount = results.count { !it.success },
            results = results,
            duration = duration
        )
    }
}
```

---

## 📊 测试报告生成规范

### 报告数据结构

```kotlin
data class TestReport(
    val moduleName: String,
    val testTime: Long = System.currentTimeMillis(),
    val totalCount: Int,
    val successCount: Int,
    val failedCount: Int,
    val results: List<TestResult>,
    val duration: Long // 总耗时（毫秒）
) {
    val successRate: Double
        get() = if (totalCount > 0) {
            (successCount.toDouble() / totalCount) * 100
        } else {
            0.0
        }

    val failedItems: List<TestResult>
        get() = results.filter { !it.success }
}
```

### 报告显示方式

1. **对话框显示**（推荐）：
   - 使用 `AlertDialog` 或 Compose `Dialog`
   - 显示完整报告内容
   - 支持滚动查看
   - 提供"关闭"和"导出"按钮

2. **页面跳转显示**：
   - 跳转到专门的测试报告页面
   - 更详细的展示空间
   - 支持历史报告查看

3. **日志输出**：
   - 同时输出到 Logcat
   - 方便开发调试
   - 格式化的日志信息

---

## 🔧 开发规范

### 测试用例编写规范

1. **命名规范**：
   - 测试用例类名：`{功能名}TestCase`
   - 测试用例名称：清晰描述测试内容
   - 例如：`StringExtensionTestCase` → "字符串扩展 - isEmpty()"

2. **测试覆盖**：
   - 正常情况测试
   - 边界情况测试
   - 异常情况测试
   - 空值/非法参数测试

3. **异步处理**：
   - 测试用例支持 `suspend` 函数
   - 使用协程处理异步操作
   - 设置合理的超时时间

4. **资源清理**：
   - 测试完成后清理资源
   - 避免测试之间的相互影响
   - 使用 `try-finally` 确保清理

### 测试按钮实现规范

```kotlin
@Composable
fun TestButton(
    testCase: TestCase,
    testState: TestState,
    onTestClick: suspend (TestCase) -> TestResult,
    modifier: Modifier = Modifier
) {
    val coroutineScope = rememberCoroutineScope()
    var currentState by remember { mutableStateOf(testState) }
    var testResult by remember { mutableStateOf<TestResult?>(null) }

    Button(
        onClick = {
            coroutineScope.launch {
                currentState = TestState.Testing
                val result = onTestClick(testCase)
                testResult = result
                currentState = if (result.success) {
                    TestState.Success
                } else {
                    TestState.Failed
                }
            }
        },
        enabled = currentState != TestState.Testing,
        colors = ButtonDefaults.buttonColors(
            containerColor = when (currentState) {
                TestState.NotTested -> Color.Gray
                TestState.Testing -> Color.Blue
                TestState.Success -> Color.Green
                TestState.Failed -> Color.Red
            }
        ),
        modifier = modifier
    ) {
        if (currentState == TestState.Testing) {
            CircularProgressIndicator(
                modifier = Modifier.size(16.dp),
                color = Color.White
            )
            Spacer(Modifier.width(8.dp))
        }
        Text(testCase.name)
    }
}
```

---

## 📋 测试清单

### 添加新功能时的测试要求

- [ ] 为新功能创建对应的测试用例
- [ ] 测试用例覆盖正常、边界、异常情况
- [ ] 测试用例注册到对应模块的测试列表
- [ ] 在功能列表中添加测试按钮
- [ ] 验证按钮状态显示正常
- [ ] 验证自动测试能正确执行新功能

### 模块测试完整性检查

- [ ] 所有公开功能都有对应测试
- [ ] 测试用例命名清晰易懂
- [ ] 测试结果准确反映功能状态
- [ ] 自动测试报告信息完整
- [ ] 错误信息有助于问题定位

---

## 🎯 最佳实践

1. **测试优先**：
   - 开发新功能时同步编写测试用例
   - 测试通过后再提交代码

2. **测试隔离**：
   - 每个测试用例应该是独立的
   - 避免测试之间的状态共享

3. **错误处理**：
   - 测试失败时提供清晰的错误信息
   - 记录详细的堆栈信息

4. **性能考虑**：
   - 自动测试时避免阻塞UI线程
   - 使用协程处理异步测试
   - 设置合理的超时时间

5. **用户体验**：
   - 测试过程有明确的视觉反馈
   - 测试结果一目了然
   - 报告内容清晰易懂

---

## 📝 更新日志

当添加新的测试功能或修改测试规则时，请更新：
1. 本规则文档
2. 相关模块的测试用例
3. 测试UI实现代码

---

## ❓ 常见问题

**Q: 测试用例应该放在哪个模块？**
- 建议在每个模块内创建 `test` 或 `testing` 子包
- 或者统一放在 `app` 模块的测试目录

**Q: 如何处理需要外部依赖的测试？**
- 使用 Mock 对象模拟外部依赖
- 或者标记为需要真实环境的集成测试

**Q: 自动测试失败后如何重试？**
- 提供"重试失败项"功能
- 只重新执行失败的测试用例

**Q: 测试报告如何持久化？**
- 可以保存到本地文件
- 或上传到测试服务器
- 方便后续分析和对比

---

> 📌 **提示**：测试是确保代码质量的重要手段，请认真对待每个测试用例的编写和维护。测试不仅验证功能正确性，也是功能使用文档的体现。

